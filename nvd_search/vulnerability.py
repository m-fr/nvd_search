from rich.text import Text
from rich.pretty import Pretty
from rich.markup import escape

from nvd_search.metrics import severity
from nvd_search.enums import Risk
from nvd_search.highlight import DescriptionHighlighter


class Vulnerability:
    LINK_PREFIX = "https://nvd.nist.gov/vuln/detail/"

    def __init__(self, cve_id, description, risk):
        self.cve_id = cve_id
        self.description = description
        self.risk = Risk(risk)

    def from_dict(data):
        return Vulnerability(
            cve_id=data['cve']['id'],
            description=data['cve']['descriptions'][0]['value'].strip(),
            risk=severity(data['cve']['metrics'])
        )

    def __str__(self):
        return f"{self.cve_id} - {self.risk} - {self.description}"

    def to_annotation(self) -> list[Text]:
        """Return a Rich Text for the vulnerability containing the CVE ID, risk, description and link.
        """
        escaped_link = escape(self.LINK_PREFIX + self.cve_id)
        highlight = DescriptionHighlighter()
        return [
            Text(self.cve_id),
            Text().from_markup(f"{self.risk.to_color()}{str(self.risk)}[/]"),
            highlight(self.description),
            Text().from_markup(f"[link={escaped_link}]{escaped_link}[/link]")
        ]
